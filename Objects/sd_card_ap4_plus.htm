<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\sd_card_ap4_plus.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\sd_card_ap4_plus.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Sun Mar 19 11:30:38 2023
<BR><P>
<H3>Maximum Stack Usage =       1792 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; sd_card_init &rArr; sd_card_cmd6_switch_func &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SecureFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[25]">am_default_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">am_default_isr</a><BR>
 <LI><a href="#[89]">am_hal_daxi_config</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8a]">am_hal_daxi_control</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5]">BusFault_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[7]">SecureFault_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[56]">__main</a> from __main.o(!!!main) referenced from startup_keil.o(RESET)
 <LI><a href="#[1f]">am_adc_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[34]">am_audadc0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[c]">am_brownout_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[57]">am_bsp_uart_string_print</a> from bsp.o(.text.am_bsp_uart_string_print) referenced 2 times from bsp.o(.text.am_bsp_buffered_uart_printf_enable)
 <LI><a href="#[57]">am_bsp_uart_string_print</a> from bsp.o(.text.am_bsp_uart_string_print) referenced 2 times from bsp.o(.text.am_bsp_uart_printf_enable)
 <LI><a href="#[55]">am_cachecpu_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[23]">am_clkgen_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[24]">am_cryptosec_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1a]">am_ctimer_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[25]">am_default_isr</a> from startup_keil.o(RESET) referenced 11 times from startup_keil.o(RESET)
 <LI><a href="#[29]">am_disp_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2a]">am_dsi_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[35]">am_dspi2s0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[36]">am_dspi2s1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[37]">am_dspi2s2_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[38]">am_dspi2s3_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[3d]">am_gpio0_001f_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[3e]">am_gpio0_203f_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[3f]">am_gpio0_405f_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[40]">am_gpio0_607f_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[41]">am_gpio1_001f_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[42]">am_gpio1_203f_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[43]">am_gpio1_405f_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[44]">am_gpio1_607f_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[28]">am_gpu_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[58]">am_hal_itm_print</a> from am_hal_itm.o(.text.am_hal_itm_print) referenced 2 times from bsp.o(.text.am_bsp_itm_printf_enable)
 <LI><a href="#[12]">am_iomaster0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[13]">am_iomaster1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[14]">am_iomaster2_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[15]">am_iomaster3_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[16]">am_iomaster4_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[17]">am_iomaster5_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[18]">am_iomaster6_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[19]">am_iomaster7_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[11]">am_ioslave_acc_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[10]">am_ioslave_ios_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[20]">am_mspi0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[21]">am_mspi1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[22]">am_mspi2_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[39]">am_pdm0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[3a]">am_pdm1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[3b]">am_pdm2_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[3c]">am_pdm3_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[e]">am_rtc_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[26]">am_sdio_isr</a> from sd_card.o(.text.am_sdio_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[2b]">am_stimer_cmpr0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2c]">am_stimer_cmpr1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2d]">am_stimer_cmpr2_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2e]">am_stimer_cmpr3_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2f]">am_stimer_cmpr4_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[30]">am_stimer_cmpr5_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[31]">am_stimer_cmpr6_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[32]">am_stimer_cmpr7_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[33]">am_stimerof_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[45]">am_timer00_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[46]">am_timer01_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[47]">am_timer02_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[48]">am_timer03_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[49]">am_timer04_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[4a]">am_timer05_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[4b]">am_timer06_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[4c]">am_timer07_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[4d]">am_timer08_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[4e]">am_timer09_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[4f]">am_timer10_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[50]">am_timer11_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[51]">am_timer12_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[52]">am_timer13_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[53]">am_timer14_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[54]">am_timer15_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1c]">am_uart1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1d]">am_uart2_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1e]">am_uart3_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1b]">am_uart_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[27]">am_usb_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[f]">am_vcomp_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[d]">am_watchdog_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[0]">sd_card_event_cb</a> from sd_card.o(.text.sd_card_event_cb) referenced 2 times from sd_card.o(.data.sd_card_host)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>am_adc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>am_audadc0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>am_brownout_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>am_cachecpu_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>am_clkgen_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>am_ctimer_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>am_disp_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>am_dsi_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>am_dspi2s0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>am_dspi2s1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>am_dspi2s2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>am_dspi2s3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>am_gpio0_001f_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>am_gpio0_203f_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>am_gpio0_405f_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>am_gpio0_607f_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>am_gpio1_001f_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>am_gpio1_203f_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>am_gpio1_405f_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>am_gpio1_607f_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>am_gpu_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>am_iomaster0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>am_iomaster1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>am_iomaster2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>am_iomaster3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>am_iomaster4_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>am_iomaster5_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>am_iomaster6_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>am_iomaster7_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>am_ioslave_acc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>am_ioslave_ios_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>am_mspi0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>am_mspi1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>am_mspi2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>am_pdm0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>am_pdm1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>am_pdm2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>am_pdm3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>am_rtc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>am_stimer_cmpr0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>am_stimer_cmpr1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>am_stimer_cmpr2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>am_stimer_cmpr3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>am_stimer_cmpr4_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>am_stimer_cmpr5_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>am_stimer_cmpr6_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>am_stimer_cmpr7_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>am_stimerof_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>am_timer00_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>am_timer01_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>am_timer02_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>am_timer03_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>am_timer04_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>am_timer05_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>am_timer06_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>am_timer07_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>am_timer08_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>am_timer09_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>am_timer10_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>am_timer11_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>am_timer12_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>am_timer13_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>am_timer14_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>am_timer15_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>am_uart1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>am_uart2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>am_uart3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>am_uart_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>am_usb_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>am_vcomp_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>am_watchdog_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[101]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[102]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[103]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[104]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[5c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[105]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[62]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[5d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[106]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[107]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[108]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[109]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[110]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[111]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[112]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[113]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[114]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[115]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[116]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[117]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[118]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[119]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[67]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[11b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[11c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[11d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[11e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[11f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[120]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[121]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[122]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[61]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[123]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[63]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; sd_card_init &rArr; sd_card_cmd6_switch_func &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[124]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[66]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[125]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[68]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[6d]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd6_switch_func
</UL>

<P><STRONG><a name="[126]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd24_write_single_block
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd17_read_single_block
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd16_set_blocklen
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd6_switch_func
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_acmd6_set_bus_width
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_acmd51_send_scr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd7_select_card
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd9_send_csd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd3_send_rel_addr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd2_all_send_cid
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd8_send_if_cond
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_acmd41_sd_app_op_cond
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd0_go_idle
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[129]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[65]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[12e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>am_bsp_buffered_uart_printf_enable</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, bsp.o(.text.am_bsp_buffered_uart_printf_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = am_bsp_buffered_uart_printf_enable &rArr; am_hal_uart_power_control &rArr; am_hal_pwrctrl_periph_disable &rArr; crypto_quiesce &rArr; am_hal_delay_us_status_change &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_buffer_configure
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_configure
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_initialize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_debug_printf_enable
</UL>

<P><STRONG><a name="[7a]"></a>am_bsp_debug_printf_enable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp.o(.text.am_bsp_debug_printf_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = am_bsp_debug_printf_enable &rArr; am_bsp_buffered_uart_printf_enable &rArr; am_hal_uart_power_control &rArr; am_hal_pwrctrl_periph_disable &rArr; crypto_quiesce &rArr; am_hal_delay_us_status_change &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_buffered_uart_printf_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_uart_printf_enable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_itm_printf_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>am_bsp_itm_printf_enable</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, bsp.o(.text.am_bsp_itm_printf_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = am_bsp_itm_printf_enable &rArr; am_hal_dcu_update &rArr; am_hal_dcu_raw_update &rArr; copy_words
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_tpiu_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_itm_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_dcu_update
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_dcu_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_debug_printf_enable
</UL>

<P><STRONG><a name="[81]"></a>am_bsp_low_power_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp.o(.text.am_bsp_low_power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = am_bsp_low_power_init &rArr; am_hal_pwrctrl_control &rArr; am_hal_pwrctrl_periph_disable &rArr; crypto_quiesce &rArr; am_hal_delay_us_status_change &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_osc_disable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_control
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>am_bsp_uart_printf_enable</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, bsp.o(.text.am_bsp_uart_printf_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = am_bsp_uart_printf_enable &rArr; am_hal_uart_power_control &rArr; am_hal_pwrctrl_periph_disable &rArr; crypto_quiesce &rArr; am_hal_delay_us_status_change &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_configure
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_initialize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_debug_printf_enable
</UL>

<P><STRONG><a name="[57]"></a>am_bsp_uart_string_print</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, bsp.o(.text.am_bsp_uart_string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = am_bsp_uart_string_print &rArr; am_hal_uart_transfer &rArr; blocking_read &rArr; nonblocking_read &rArr; nonblocking_read_sm &rArr; rx_queue_update &rArr; am_hal_queue_item_add
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bsp.o(.text.am_bsp_uart_printf_enable)
<LI> bsp.o(.text.am_bsp_buffered_uart_printf_enable)
</UL>
<P><STRONG><a name="[86]"></a>am_hal_cachectrl_config</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, am_hal_cachectrl.o(.text.am_hal_cachectrl_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_cachectrl_config
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>am_hal_cachectrl_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, am_hal_cachectrl.o(.text.am_hal_cachectrl_enable))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>am_hal_daxi_config</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, am_hal_cachectrl.o(.text.am_hal_daxi_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = am_hal_daxi_config &rArr;  am_hal_daxi_control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_daxi_control
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_daxi_control
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
</UL>

<P><STRONG><a name="[8a]"></a>am_hal_daxi_control</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, am_hal_cachectrl.o(.text.am_hal_daxi_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = am_hal_daxi_control &rArr; daxi_flush_complete &rArr; daxi_flush_invalidate
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_daxi_config
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daxi_flush_invalidate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daxi_flush_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_daxi_config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_xfer_data
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_send_cmd
</UL>

<P><STRONG><a name="[7d]"></a>am_hal_dcu_get</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, am_hal_dcu.o(.text.am_hal_dcu_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = am_hal_dcu_get &rArr; am_hal_dcu_raw_get &rArr; copy_words
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_dcu_raw_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ui32_dcu_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_itm_printf_enable
</UL>

<P><STRONG><a name="[7e]"></a>am_hal_dcu_update</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, am_hal_dcu.o(.text.am_hal_dcu_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = am_hal_dcu_update &rArr; am_hal_dcu_raw_update &rArr; copy_words
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_dcu_raw_update
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_raw_dcu_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_itm_printf_enable
</UL>

<P><STRONG><a name="[93]"></a>am_hal_delay_us</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, am_hal_utils.o(.text.am_hal_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_boost_trims
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us_status_change
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us_status_check
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_tpiu_enable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_write
</UL>

<P><STRONG><a name="[92]"></a>am_hal_delay_us_status_change</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, am_hal_utils.o(.text.am_hal_delay_us_status_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = am_hal_delay_us_status_change &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_quiesce
</UL>

<P><STRONG><a name="[94]"></a>am_hal_delay_us_status_check</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, am_hal_utils.o(.text.am_hal_delay_us_status_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = am_hal_delay_us_status_check &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp1_memory_config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp0_memory_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_sram_config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_mcu_memory_config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_check_cmd_inhibit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_wait_cmd_done
</UL>

<P><STRONG><a name="[76]"></a>am_hal_gpio_pinconfig</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, am_hal_gpio.o(.text.am_hal_gpio_pinconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_gpio_pinconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_gpio_power_down
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_gpio_power_up
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_buffered_uart_printf_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_uart_printf_enable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_itm_printf_enable
</UL>

<P><STRONG><a name="[87]"></a>am_hal_interrupt_master_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.text.am_hal_interrupt_master_disable))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_boost_trims
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_daxi_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daxi_flush_complete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_execute_cmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_transaction_save
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_transaction_save
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_queue_update
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_queue_update
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_read_sm
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_write_sm
</UL>

<P><STRONG><a name="[c4]"></a>am_hal_interrupt_master_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.text.am_hal_interrupt_master_enable))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>am_hal_interrupt_master_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_hal_interrupt.o(.text.am_hal_interrupt_master_set))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_boost_trims
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_daxi_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daxi_flush_complete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_execute_cmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_transaction_save
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_transaction_save
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_queue_update
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_queue_update
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_read_sm
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_write_sm
</UL>

<P><STRONG><a name="[7f]"></a>am_hal_itm_enable</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, am_hal_itm.o(.text.am_hal_itm_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_itm_printf_enable
</UL>

<P><STRONG><a name="[58]"></a>am_hal_itm_print</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, am_hal_itm.o(.text.am_hal_itm_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = am_hal_itm_print &rArr; am_hal_itm_stimulus_reg_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_itm_stimulus_reg_byte_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.text.am_bsp_itm_printf_enable)
</UL>
<P><STRONG><a name="[95]"></a>am_hal_itm_stimulus_reg_byte_write</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, am_hal_itm.o(.text.am_hal_itm_stimulus_reg_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = am_hal_itm_stimulus_reg_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_itm_print
</UL>

<P><STRONG><a name="[70]"></a>am_hal_mram_info_read</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, am_hal_mram.o(.text.am_hal_mram_info_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_mram_info_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrimVersionGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
</UL>

<P><STRONG><a name="[83]"></a>am_hal_pwrctrl_control</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, am_hal_pwrctrl.o(.text.am_hal_pwrctrl_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = am_hal_pwrctrl_control &rArr; am_hal_pwrctrl_periph_disable &rArr; crypto_quiesce &rArr; am_hal_delay_us_status_change &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buck_ldo_override_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enabled
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrimVersionGet
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[99]"></a>am_hal_pwrctrl_dsp_memory_config</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, am_hal_pwrctrl.o(.text.am_hal_pwrctrl_dsp_memory_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = am_hal_pwrctrl_dsp_memory_config &rArr; dsp1_memory_config &rArr; am_hal_delay_us_status_check &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp1_memory_config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp0_memory_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_config
</UL>

<P><STRONG><a name="[82]"></a>am_hal_pwrctrl_low_power_init</STRONG> (Thumb, 638 bytes, Stack size 24 bytes, am_hal_pwrctrl.o(.text.am_hal_pwrctrl_low_power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_hal_pwrctrl_low_power_init &rArr; am_hal_pwrctrl_sram_config &rArr; am_hal_delay_us_status_check &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mram_info_read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_daxi_config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_sram_config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_mcu_memory_config
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[9c]"></a>am_hal_pwrctrl_mcu_memory_config</STRONG> (Thumb, 538 bytes, Stack size 32 bytes, am_hal_pwrctrl.o(.text.am_hal_pwrctrl_mcu_memory_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = am_hal_pwrctrl_mcu_memory_config &rArr; am_hal_delay_us_status_check &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us_status_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
</UL>

<P><STRONG><a name="[98]"></a>am_hal_pwrctrl_periph_disable</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, am_hal_pwrctrl.o(.text.am_hal_pwrctrl_periph_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = am_hal_pwrctrl_periph_disable &rArr; crypto_quiesce &rArr; am_hal_delay_us_status_change &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_boost_trims
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrctrl_periph_disable_msk_check
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_quiesce
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_get_pwrctrl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us_status_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sdhc_power_control
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_control
</UL>

<P><STRONG><a name="[a2]"></a>am_hal_pwrctrl_periph_enable</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, am_hal_pwrctrl.o(.text.am_hal_pwrctrl_periph_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_hal_pwrctrl_periph_enable &rArr; crypto_boost_trims &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_boost_trims
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_get_pwrctrl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us_status_change
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us_status_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sdhc_power_control
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
</UL>

<P><STRONG><a name="[97]"></a>am_hal_pwrctrl_periph_enabled</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, am_hal_pwrctrl.o(.text.am_hal_pwrctrl_periph_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = am_hal_pwrctrl_periph_enabled &rArr; am_get_pwrctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_get_pwrctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_control
</UL>

<P><STRONG><a name="[9d]"></a>am_hal_pwrctrl_sram_config</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, am_hal_pwrctrl.o(.text.am_hal_pwrctrl_sram_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = am_hal_pwrctrl_sram_config &rArr; am_hal_delay_us_status_check &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us_status_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_low_power_init
</UL>

<P><STRONG><a name="[aa]"></a>am_hal_queue_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, am_hal_queue.o(.text.am_hal_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_buffer_configure
</UL>

<P><STRONG><a name="[a3]"></a>am_hal_queue_item_add</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, am_hal_queue.o(.text.am_hal_queue_item_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_queue_item_add
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_queue_update
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_write_sm
</UL>

<P><STRONG><a name="[a4]"></a>am_hal_queue_item_get</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, am_hal_queue.o(.text.am_hal_queue_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_queue_update
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_read_sm
</UL>

<P><STRONG><a name="[84]"></a>am_hal_rtc_osc_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, am_hal_rtc.o(.text.am_hal_rtc_osc_disable))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[f4]"></a>am_hal_sdhc_deinitialize</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, am_hal_sdhc.o(.text.am_hal_sdhc_deinitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = am_hal_sdhc_deinitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_host_deinit
</UL>

<P><STRONG><a name="[a5]"></a>am_hal_sdhc_disable</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, am_hal_sdhc.o(.text.am_hal_sdhc_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = am_hal_sdhc_disable &rArr; am_util_delay_ms &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_host_deinit
</UL>

<P><STRONG><a name="[f5]"></a>am_hal_sdhc_initialize</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, am_hal_sdhc.o(.text.am_hal_sdhc_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = am_hal_sdhc_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_host_init
</UL>

<P><STRONG><a name="[a9]"></a>am_hal_sdhc_intr_status_disable</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, am_hal_sdhc.o(.text.am_hal_sdhc_intr_status_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = am_hal_sdhc_intr_status_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sdhc_power_control
</UL>

<P><STRONG><a name="[a8]"></a>am_hal_sdhc_power_control</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, am_hal_sdhc.o(.text.am_hal_sdhc_power_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = am_hal_sdhc_power_control &rArr; am_hal_pwrctrl_periph_disable &rArr; crypto_quiesce &rArr; am_hal_delay_us_status_change &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sdhc_intr_status_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_host_deinit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_host_init
</UL>

<P><STRONG><a name="[e6]"></a>am_hal_sdhc_set_bus_width</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, am_hal_sdhc.o(.text.am_hal_sdhc_set_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = am_hal_sdhc_set_bus_width
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[80]"></a>am_hal_tpiu_enable</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, am_hal_tpiu.o(.text.am_hal_tpiu_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_tpiu_enable &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_itm_printf_enable
</UL>

<P><STRONG><a name="[75]"></a>am_hal_uart_buffer_configure</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, am_hal_uart.o(.text.am_hal_uart_buffer_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = am_hal_uart_buffer_configure &rArr; am_hal_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_buffered_uart_printf_enable
</UL>

<P><STRONG><a name="[74]"></a>am_hal_uart_configure</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, am_hal_uart.o(.text.am_hal_uart_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = am_hal_uart_configure &rArr; config_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_buffered_uart_printf_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_uart_printf_enable
</UL>

<P><STRONG><a name="[ce]"></a>am_hal_uart_fifo_read</STRONG> (Thumb, 134 bytes, Stack size 36 bytes, am_hal_uart.o(.text.am_hal_uart_fifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = am_hal_uart_fifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_queue_update
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_read_sm
</UL>

<P><STRONG><a name="[d0]"></a>am_hal_uart_fifo_write</STRONG> (Thumb, 108 bytes, Stack size 28 bytes, am_hal_uart.o(.text.am_hal_uart_fifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = am_hal_uart_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_queue_update
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_write_sm
</UL>

<P><STRONG><a name="[72]"></a>am_hal_uart_initialize</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, am_hal_uart.o(.text.am_hal_uart_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_uart_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_buffered_uart_printf_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_uart_printf_enable
</UL>

<P><STRONG><a name="[ac]"></a>am_hal_uart_interrupt_clear</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, am_hal_uart.o(.text.am_hal_uart_interrupt_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = am_hal_uart_interrupt_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
</UL>

<P><STRONG><a name="[73]"></a>am_hal_uart_power_control</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, am_hal_uart.o(.text.am_hal_uart_power_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = am_hal_uart_power_control &rArr; am_hal_pwrctrl_periph_disable &rArr; crypto_quiesce &rArr; am_hal_delay_us_status_change &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_buffered_uart_printf_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_uart_printf_enable
</UL>

<P><STRONG><a name="[85]"></a>am_hal_uart_transfer</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, am_hal_uart.o(.text.am_hal_uart_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = am_hal_uart_transfer &rArr; blocking_read &rArr; nonblocking_read &rArr; nonblocking_read_sm &rArr; rx_queue_update &rArr; am_hal_queue_item_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_write
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_uart_string_print
</UL>

<P><STRONG><a name="[26]"></a>am_sdio_isr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sd_card.o(.text.am_sdio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_sdio_isr &rArr; sdhc_interrupt_service
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_interrupt_service
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>am_util_delay_ms</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, am_util_delay.o(.text.am_util_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_util_delay_ms &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_gpio_power_down
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_gpio_power_up
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_acmd41_sd_app_op_cond
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sdhc_disable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_set_bus_clock
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_software_reset
</UL>

<P><STRONG><a name="[b2]"></a>am_util_delay_us</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, am_util_delay.o(.text.am_util_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_util_delay_us &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_xfer_data
</UL>

<P><STRONG><a name="[b3]"></a>am_util_stdio_printf</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, am_util_stdio.o(.text.am_util_stdio_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_event_cb
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_execute_cmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_set_bus_clock
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_enable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_prepare_xfer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_check_cmd_inhibit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_xfer_data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_wait_cmd_done
</UL>

<P><STRONG><a name="[77]"></a>am_util_stdio_printf_init</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, am_util_stdio.o(.text.am_util_stdio_printf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = am_util_stdio_printf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_buffered_uart_printf_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_uart_printf_enable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_itm_printf_enable
</UL>

<P><STRONG><a name="[b4]"></a>am_util_stdio_vsprintf</STRONG> (Thumb, 1620 bytes, Stack size 128 bytes, am_util_stdio.o(.text.am_util_stdio_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_i64
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_hexstr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_hex
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;padbuffer
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strlen
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr_to_int
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
</UL>

<P><STRONG><a name="[96]"></a>buck_ldo_override_init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, am_hal_pwrctrl.o(.text.buck_ldo_override_init))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_control
</UL>

<P><STRONG><a name="[a0]"></a>crypto_boost_trims</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, am_hal_pwrctrl.o(.text.crypto_boost_trims))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = crypto_boost_trims &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
</UL>

<P><STRONG><a name="[64]"></a>main</STRONG> (Thumb, 596 bytes, Stack size 1088 bytes, sd_card_ap4_plus.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = main &rArr; sd_card_init &rArr; sd_card_cmd6_switch_func &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_gpio_power_down
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_gpio_power_up
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_enable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_config
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_read_block
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_write_block
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_host_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_debug_printf_enable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c2]"></a>memory_config</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, sd_card_ap4_plus.o(.text.memory_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = memory_config &rArr; am_hal_pwrctrl_dsp_memory_config &rArr; dsp1_memory_config &rArr; am_hal_delay_us_status_check &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_dsp_memory_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_sram_config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_mcu_memory_config
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>read_transaction_save</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, am_hal_uart.o(.text.read_transaction_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_transaction_save
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_read
</UL>

<P><STRONG><a name="[d2]"></a>sd_card_acmd41_sd_app_op_cond</STRONG> (Thumb, 350 bytes, Stack size 72 bytes, sd_card.o(.text.sd_card_acmd41_sd_app_op_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = sd_card_acmd41_sd_app_op_cond &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[d5]"></a>sd_card_acmd51_send_scr</STRONG> (Thumb, 202 bytes, Stack size 104 bytes, sd_card.o(.text.sd_card_acmd51_send_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = sd_card_acmd51_send_scr &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_scr_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[d7]"></a>sd_card_acmd6_set_bus_width</STRONG> (Thumb, 240 bytes, Stack size 80 bytes, sd_card.o(.text.sd_card_acmd6_set_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = sd_card_acmd6_set_bus_width &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[d8]"></a>sd_card_cmd0_go_idle</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, sd_card.o(.text.sd_card_cmd0_go_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = sd_card_cmd0_go_idle &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[d9]"></a>sd_card_cmd16_set_blocklen</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, sd_card.o(.text.sd_card_cmd16_set_blocklen))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = sd_card_cmd16_set_blocklen &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[da]"></a>sd_card_cmd17_read_single_block</STRONG> (Thumb, 118 bytes, Stack size 88 bytes, sd_card.o(.text.sd_card_cmd17_read_single_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = sd_card_cmd17_read_single_block &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_read_block
</UL>

<P><STRONG><a name="[db]"></a>sd_card_cmd24_write_single_block</STRONG> (Thumb, 112 bytes, Stack size 88 bytes, sd_card.o(.text.sd_card_cmd24_write_single_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = sd_card_cmd24_write_single_block &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_write_block
</UL>

<P><STRONG><a name="[dc]"></a>sd_card_cmd2_all_send_cid</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, sd_card.o(.text.sd_card_cmd2_all_send_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = sd_card_cmd2_all_send_cid &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[dd]"></a>sd_card_cmd3_send_rel_addr</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, sd_card.o(.text.sd_card_cmd3_send_rel_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = sd_card_cmd3_send_rel_addr &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[de]"></a>sd_card_cmd6_switch_func</STRONG> (Thumb, 124 bytes, Stack size 160 bytes, sd_card.o(.text.sd_card_cmd6_switch_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = sd_card_cmd6_switch_func &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[df]"></a>sd_card_cmd7_select_card</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, sd_card.o(.text.sd_card_cmd7_select_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = sd_card_cmd7_select_card &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[e0]"></a>sd_card_cmd8_send_if_cond</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, sd_card.o(.text.sd_card_cmd8_send_if_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = sd_card_cmd8_send_if_cond &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[e1]"></a>sd_card_cmd9_send_csd</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, sd_card.o(.text.sd_card_cmd9_send_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = sd_card_cmd9_send_csd &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[e5]"></a>sd_card_csd_decode</STRONG> (Thumb, 354 bytes, Stack size 36 bytes, sd_card.o(.text.sd_card_csd_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sd_card_csd_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[0]"></a>sd_card_event_cb</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, sd_card.o(.text.sd_card_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = sd_card_event_cb &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_card.o(.data.sd_card_host)
</UL>
<P><STRONG><a name="[d4]"></a>sd_card_execute_cmd</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, sd_card.o(.text.sd_card_execute_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_execute_cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd24_write_single_block
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd17_read_single_block
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd16_set_blocklen
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd6_switch_func
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_acmd6_set_bus_width
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_acmd51_send_scr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd7_select_card
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd9_send_csd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd3_send_rel_addr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd2_all_send_cid
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd8_send_if_cond
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_acmd41_sd_app_op_cond
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd0_go_idle
</UL>

<P><STRONG><a name="[c5]"></a>sd_card_host_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sd_card.o(.text.sd_card_host_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sd_card_host_init &rArr; sdhc_host_init &rArr; sdhc_host_config &rArr; sdhc_set_bus_clock &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_host_deinit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_host_init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>sd_card_init</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, sd_card.o(.text.sd_card_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = sd_card_init &rArr; sd_card_cmd6_switch_func &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sdhc_set_bus_width
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd16_set_blocklen
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd6_switch_func
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_acmd6_set_bus_width
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_csd_decode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_acmd51_send_scr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd7_select_card
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd9_send_csd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd3_send_rel_addr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd2_all_send_cid
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd8_send_if_cond
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_acmd41_sd_app_op_cond
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd0_go_idle
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>sd_card_read_block</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sd_card.o(.text.sd_card_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = sd_card_read_block &rArr; sd_card_cmd17_read_single_block &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd17_read_single_block
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>sd_card_scr_get</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, sd_card.o(.text.sd_card_scr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_card_scr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_acmd51_send_scr
</UL>

<P><STRONG><a name="[c8]"></a>sd_card_write_block</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sd_card.o(.text.sd_card_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = sd_card_write_block &rArr; sd_card_cmd24_write_single_block &rArr; sd_card_execute_cmd &rArr; sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_cmd24_write_single_block
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>sdhc_enable</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, sdhc.o(.text.sdhc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = sdhc_enable &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_software_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_host_init
</UL>

<P><STRONG><a name="[e2]"></a>sdhc_execute_cmd</STRONG> (Thumb, 582 bytes, Stack size 48 bytes, sdhc.o(.text.sdhc_execute_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = sdhc_execute_cmd &rArr; sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_xfer_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_get_cmd_response
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_wait_cmd_done
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_send_cmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_software_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_execute_cmd
</UL>

<P><STRONG><a name="[f0]"></a>sdhc_host_config</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, sdhc.o(.text.sdhc_host_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = sdhc_host_config &rArr; sdhc_set_bus_clock &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_set_bus_clock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_set_bus_voltage
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_set_bus_width
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_host_init
</UL>

<P><STRONG><a name="[e3]"></a>sdhc_host_deinit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sdhc.o(.text.sdhc_host_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sdhc_host_deinit &rArr; am_hal_sdhc_power_control &rArr; am_hal_pwrctrl_periph_disable &rArr; crypto_quiesce &rArr; am_hal_delay_us_status_change &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sdhc_deinitialize
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sdhc_disable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sdhc_power_control
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_host_init
</UL>

<P><STRONG><a name="[e4]"></a>sdhc_host_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sdhc.o(.text.sdhc_host_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sdhc_host_init &rArr; sdhc_host_config &rArr; sdhc_set_bus_clock &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sdhc_power_control
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sdhc_initialize
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_host_config
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_host_init
</UL>

<P><STRONG><a name="[b1]"></a>sdhc_interrupt_service</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, sdhc.o(.text.sdhc_interrupt_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdhc_interrupt_service
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_sdio_isr
</UL>

<P><STRONG><a name="[f3]"></a>sdhc_set_bus_clock</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, sdhc.o(.text.sdhc_set_bus_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = sdhc_set_bus_clock &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_host_config
</UL>

<P><STRONG><a name="[f2]"></a>sdhc_set_bus_voltage</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, sdhc.o(.text.sdhc_set_bus_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sdhc_set_bus_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_host_config
</UL>

<P><STRONG><a name="[f1]"></a>sdhc_set_bus_width</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sdhc.o(.text.sdhc_set_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdhc_set_bus_width
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_host_config
</UL>

<P><STRONG><a name="[ca]"></a>sdio_gpio_power_down</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sd_card_gpio.o(.text.sdio_gpio_power_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sdio_gpio_power_down &rArr; am_util_delay_ms &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>sdio_gpio_power_up</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, sd_card_gpio.o(.text.sdio_gpio_power_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sdio_gpio_power_up &rArr; am_util_delay_ms &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>write_transaction_save</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, am_hal_uart.o(.text.write_transaction_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_transaction_save
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_write
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[fe]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[100]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[5e]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[131]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[132]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[ff]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[78]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_buffered_uart_printf_enable
</UL>

<P><STRONG><a name="[79]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, bsp.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_buffered_uart_printf_enable
</UL>

<P><STRONG><a name="[e9]"></a>sdhc_software_reset</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, sdhc.o(.text.sdhc_software_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sdhc_software_reset &rArr; am_util_delay_ms &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_execute_cmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_enable
</UL>

<P><STRONG><a name="[ea]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sdhc.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_enable
</UL>

<P><STRONG><a name="[eb]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, sdhc.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_enable
</UL>

<P><STRONG><a name="[ec]"></a>sdhc_send_cmd</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, sdhc.o(.text.sdhc_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = sdhc_send_cmd &rArr; sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_daxi_control
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_prepare_xfer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_prepare_cmd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_check_cmd_inhibit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_execute_cmd
</UL>

<P><STRONG><a name="[ed]"></a>sdhc_wait_cmd_done</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, sdhc.o(.text.sdhc_wait_cmd_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = sdhc_wait_cmd_done &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us_status_check
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_check_cmd_error_type
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_execute_cmd
</UL>

<P><STRONG><a name="[ee]"></a>sdhc_get_cmd_response</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sdhc.o(.text.sdhc_get_cmd_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdhc_get_cmd_response
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_execute_cmd
</UL>

<P><STRONG><a name="[ef]"></a>sdhc_xfer_data</STRONG> (Thumb, 556 bytes, Stack size 56 bytes, sdhc.o(.text.sdhc_xfer_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = sdhc_xfer_data &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_daxi_control
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_check_data_error_type
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_pio_xfer_data
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_sdma_xfer_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_execute_cmd
</UL>

<P><STRONG><a name="[e7]"></a>sdhc_check_cmd_inhibit</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, sdhc.o(.text.sdhc_check_cmd_inhibit))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sdhc_check_cmd_inhibit &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us_status_check
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_send_cmd
</UL>

<P><STRONG><a name="[f9]"></a>sdhc_prepare_cmd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, sdhc.o(.text.sdhc_prepare_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdhc_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_send_cmd
</UL>

<P><STRONG><a name="[f8]"></a>sdhc_prepare_xfer</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, sdhc.o(.text.sdhc_prepare_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = sdhc_prepare_xfer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_prepare_adma_table
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_send_cmd
</UL>

<P><STRONG><a name="[fa]"></a>sdhc_check_cmd_error_type</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, sdhc.o(.text.sdhc_check_cmd_error_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdhc_check_cmd_error_type
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_wait_cmd_done
</UL>

<P><STRONG><a name="[fb]"></a>sdhc_sdma_xfer_data</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sdhc.o(.text.sdhc_sdma_xfer_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdhc_sdma_xfer_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_xfer_data
</UL>

<P><STRONG><a name="[fc]"></a>sdhc_pio_xfer_data</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, sdhc.o(.text.sdhc_pio_xfer_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sdhc_pio_xfer_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_xfer_data
</UL>

<P><STRONG><a name="[fd]"></a>sdhc_check_data_error_type</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sdhc.o(.text.sdhc_check_data_error_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdhc_check_data_error_type
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_xfer_data
</UL>

<P><STRONG><a name="[f6]"></a>sdhc_prepare_adma_table</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, sdhc.o(.text.sdhc_prepare_adma_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sdhc_prepare_adma_table &rArr; sdhc_prepare_sdhci_adma_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_prepare_sdhci_adma_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_prepare_xfer
</UL>

<P><STRONG><a name="[f7]"></a>sdhc_prepare_sdhci_adma_desc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, sdhc.o(.text.sdhc_prepare_sdhci_adma_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sdhc_prepare_sdhci_adma_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_prepare_adma_table
</UL>

<P><STRONG><a name="[24]"></a>am_cryptosec_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>am_default_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_default_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_default_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>decstr_to_int</STRONG> (Thumb, 166 bytes, Stack size 28 bytes, am_util_stdio.o(.text.decstr_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = decstr_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[b6]"></a>simple_strlen</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, am_util_stdio.o(.text.simple_strlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = simple_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[b7]"></a>padbuffer</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, am_util_stdio.o(.text.padbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = padbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[b8]"></a>ndigits_in_hex</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, am_util_stdio.o(.text.ndigits_in_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ndigits_in_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[b9]"></a>uint64_to_hexstr</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, am_util_stdio.o(.text.uint64_to_hexstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uint64_to_hexstr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[ba]"></a>ndigits_in_u64</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, am_util_stdio.o(.text.ndigits_in_u64))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ndigits_in_u64 &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_i64
</UL>

<P><STRONG><a name="[bb]"></a>uint64_to_str</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, am_util_stdio.o(.text.uint64_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[bc]"></a>ndigits_in_i64</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, am_util_stdio.o(.text.ndigits_in_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ndigits_in_i64 &rArr; ndigits_in_u64 &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[be]"></a>ftoa</STRONG> (Thumb, 560 bytes, Stack size 72 bytes, am_util_stdio.o(.text.ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[cb]"></a>divu64_10</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, am_util_stdio.o(.text.divu64_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
</UL>

<P><STRONG><a name="[8b]"></a>daxi_flush_complete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, am_hal_cachectrl.o(.text.daxi_flush_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = daxi_flush_complete &rArr; daxi_flush_invalidate
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daxi_flush_invalidate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_daxi_control
</UL>

<P><STRONG><a name="[8c]"></a>daxi_flush_invalidate</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, am_hal_cachectrl.o(.text.daxi_flush_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = daxi_flush_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daxi_flush_complete
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_daxi_control
</UL>

<P><STRONG><a name="[9a]"></a>dsp0_memory_config</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, am_hal_pwrctrl.o(.text.dsp0_memory_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dsp0_memory_config &rArr; am_hal_delay_us_status_check &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us_status_check
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_dsp_memory_config
</UL>

<P><STRONG><a name="[9b]"></a>dsp1_memory_config</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, am_hal_pwrctrl.o(.text.dsp1_memory_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dsp1_memory_config &rArr; am_hal_delay_us_status_check &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us_status_check
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_dsp_memory_config
</UL>

<P><STRONG><a name="[9e]"></a>am_get_pwrctrl</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, am_hal_pwrctrl.o(.text.am_get_pwrctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = am_get_pwrctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enabled
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrctrl_periph_disable_msk_check
</UL>

<P><STRONG><a name="[9f]"></a>crypto_quiesce</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, am_hal_pwrctrl.o(.text.crypto_quiesce))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = crypto_quiesce &rArr; am_hal_delay_us_status_change &rArr; am_hal_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us_status_change
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
</UL>

<P><STRONG><a name="[a1]"></a>pwrctrl_periph_disable_msk_check</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, am_hal_pwrctrl.o(.text.pwrctrl_periph_disable_msk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pwrctrl_periph_disable_msk_check &rArr; am_get_pwrctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_get_pwrctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
</UL>

<P><STRONG><a name="[6f]"></a>TrimVersionGet</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, am_hal_pwrctrl.o(.text.TrimVersionGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TrimVersionGet &rArr; am_hal_mram_info_read
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mram_info_read
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_control
</UL>

<P><STRONG><a name="[8e]"></a>get_ui32_dcu_mask</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, am_hal_dcu.o(.text.get_ui32_dcu_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_ui32_dcu_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_dcu_get
</UL>

<P><STRONG><a name="[8f]"></a>copy_words</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, am_hal_dcu.o(.text.copy_words))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = copy_words
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_dcu_raw_update
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_dcu_raw_get
</UL>

<P><STRONG><a name="[91]"></a>get_raw_dcu_mask</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, am_hal_dcu.o(.text.get_raw_dcu_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_raw_dcu_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_dcu_update
</UL>

<P><STRONG><a name="[8d]"></a>am_hal_dcu_raw_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, am_hal_dcu.o(.text.am_hal_dcu_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = am_hal_dcu_raw_get &rArr; copy_words
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_words
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_dcu_get
</UL>

<P><STRONG><a name="[90]"></a>am_hal_dcu_raw_update</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, am_hal_dcu.o(.text.am_hal_dcu_raw_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = am_hal_dcu_raw_update &rArr; copy_words
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_words
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_dcu_update
</UL>

<P><STRONG><a name="[ab]"></a>config_baudrate</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, am_hal_uart.o(.text.config_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = config_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_configure
</UL>

<P><STRONG><a name="[ad]"></a>blocking_write</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, am_hal_uart.o(.text.blocking_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = blocking_write &rArr; nonblocking_write &rArr; nonblocking_write_sm &rArr; tx_queue_update &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_write_sm
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_write
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
</UL>

<P><STRONG><a name="[ae]"></a>blocking_read</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, am_hal_uart.o(.text.blocking_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = blocking_read &rArr; nonblocking_read &rArr; nonblocking_read_sm &rArr; rx_queue_update &rArr; am_hal_queue_item_add
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_delay_us
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_read_sm
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_read
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
</UL>

<P><STRONG><a name="[af]"></a>nonblocking_write</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, am_hal_uart.o(.text.nonblocking_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nonblocking_write &rArr; nonblocking_write_sm &rArr; tx_queue_update &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_transaction_save
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_write_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_write
</UL>

<P><STRONG><a name="[b0]"></a>nonblocking_read</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, am_hal_uart.o(.text.nonblocking_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nonblocking_read &rArr; nonblocking_read_sm &rArr; rx_queue_update &rArr; am_hal_queue_item_add
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_transaction_save
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_read_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_read
</UL>

<P><STRONG><a name="[c0]"></a>nonblocking_write_sm</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, am_hal_uart.o(.text.nonblocking_write_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nonblocking_write_sm &rArr; tx_queue_update &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_fifo_write
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_queue_update
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_write
</UL>

<P><STRONG><a name="[bf]"></a>nonblocking_read_sm</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, am_hal_uart.o(.text.nonblocking_read_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nonblocking_read_sm &rArr; rx_queue_update &rArr; am_hal_queue_item_add
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_fifo_read
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_queue_update
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blocking_read
</UL>

<P><STRONG><a name="[cd]"></a>rx_queue_update</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, am_hal_uart.o(.text.rx_queue_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rx_queue_update &rArr; am_hal_queue_item_add
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_fifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_read_sm
</UL>

<P><STRONG><a name="[d1]"></a>tx_queue_update</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, am_hal_uart.o(.text.tx_queue_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tx_queue_update &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nonblocking_write_sm
</UL>

<P><STRONG><a name="[a6]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, am_hal_sdhc.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sdhc_disable
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
